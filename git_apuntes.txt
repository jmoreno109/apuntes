
// egit
https://wiki.eclipse.org/EGit/User_Guide#Getting_Started

// free app
https://www.sourcetreeapp.com/

// clone example
git://github.com/vogella/eclipse4book.git
https://github.com/libgit2/libgit2
https://github.com/schacon/simplegit-progit

// crear .gitignore
https://www.toptal.com/developers/gitignore

Git en Zsh

// delete from eclipse
Window > Show View -> Other...
Git > Git Repositories

// delete git repository local
rm -rf .git

// .gitignore sample
# Compiled class file
*.class

# Eclipse
.classpath
.project
.settings/


// tkdiff - herramientas comparar 
http://www.posoft.de/html/tkdiffMain.html

git difftool --tool=meld

gitkraken - editor grafico git  

mintty - emulador 

Cuando se instala Git, también se instalan sus herramientas gráficas: gitk y git-gui.


Paso 1 - Git Init
Para almacenar un directorio bajo control de versiones, se necesita crear un repositorio. 
Con GIT se inicializa un repositorio en el primer nivel del directorio de un proyecto.

Paso 2 - Git Status
Cuando un directorio es parte de un repositorio, se le llama Working Directory. 
Un directorio de trabajo o working directory contiene la última versión descargada desde el repositorio junto con cualquier cambio que tenga que ser aprobado. 
Al estar trabajando en un proyecto, todos los cambios se realizan en el working directory.

Paso 3 - Git Add
Para guardar, o aprobar (commit) ficheros en nuestro repositorio GIT, primero se necesita añadirlos al stagging area (área de preparación). 
Git tiene tres áreas: un working directory, un staging area, y el propio repositorio en sí (directorio oculto .git). 
Los usuarios “mueven” (también se refiere a ello como “promueven/promote”) cambios desde el working directory al área de preparación o staging área, 
antes de aprobarlos/commit hacia el repositorio.

Paso 4 - Git Commit
Una vez que el fichero ha sido añadido a la satging area, se necesita que sea aprobado (commited) hacia el repositorio. 
El comando git commit -m “commit message” mueve ficheros desde la staging area o área de preparación hacia el repositorio, 
y almacena fecha/hora, autor y un mensaje de aprobación que puede usarse para agregar información de contexto adicional a los cambios, 
como por ejemplo un identificador de error, o número identificador de bug.

Paso 5 - Git Ignore
A veces, hay ficheros o directorios que nunca querremos aprobar aunque estén en nuestro working directory , como por ejemplo configuración local de desarrollo. Para ignorar estos ficheros, usamos un fichero .gitignore lal raíz del repositorio.
IMPORTANTE: el propio .gitignore debería ser aprobado/committed al repositorio para asegurar que las reglas se cumplen en máquinas diferentes, ya que si no, solo se aplicaría a tu repositorio local.


# Clono de un repositorio remoto: Github, Gitlab, ... 
# Previamente he configurado este repositorio
	git clone <URL_repositorio_remoto>
# Establezco los parámetros de mi usuario
	git config user.name "J2logo"
	git config user.email juanjo@j2logo.com
# Creo la rama dev a partir de master
	git checkout -b dev
# Pusheo la rama dev en el repositorio remoto
	git push origin dev
# Cuando tengo que desarrollar algo, creo la
# rama correspondiente
	git checkout -b feature/feature_1
# Voy haciendo commits sobre la rama feature_1
# hasta que la funcionalidad está terminada
	git commit -m "Msg 1"
	git commit -m "Msg 2"
# Cuando la funcionalidad está lista, la paso
# a la rama dev. Para ello, me sitúo en dev
	git checkout dev
# Actualizo la rama dev con posibles cambios
# en el repositorio remoto
	git pull origin dev
# Ahora sí, integro los cambios de la rama
# feature_1 en la rama dev
	git merge --no-ff feature/feature_1
# Pusheo la rama dev para que el resto del
# equipo pueda ver los cambios
	git push origin dev
# Borro la rama feature_1 porque ya no
# me va a hacer falta
	git branch -d feature/feature_1
	
	
■ git branch
	
// Crear una rama nueva
git branch <experimental>

// ver branches
git show-branch
git branch --list 

// Borrado de la rama en local
git branch -d rama_a_borrar
git branch -D rama_a_borrar

// ramas locales y remotas
git branch -a
git branch -l
git branch -r

git branch -v // ultima mod de cada rama
git branch -vv // ramas de seguimientos
git fetch --all ;git branch -vv


■ git clean

git clean -d -n // muestra lo que se podria borrar que no esta en GIT
git clean -f -d


■ git config

git config --global alias.co checkout // crear abreviaciones
git config --global alias.last 'log -1 HEAD'
git config —global user.name “TU NOMBRE”
git config —global user.email tunombre@tudominio.com
git config —global diff.tool vimdiff
git config —global diff.tool tkdiff
git config —global credential.helper manager //En un windows si trabajamos en proyectos compartidos (LF a CRLF)
git config —global core.autocrlf true // En un linux, para que haga lo contrario (LF a CRLF):
git config —global core.autocrlf input
//Dejarlo como está, sin alterar nada (para proyectos en los que todos tendremos el mismo SO)
git config —global core.autocrlf false
git config --global core.editor "\"c:\Program Files\Notepad++\notepad++.exe\""


■ git diff

git diff
git diff -s
git diff <filename>
git diff <directory>
git diff -r HEAD path/to/file
git diff HEAD..HEAD~3
git diff 1ec4e2c:readme.md 5a78d35:readme.md


■ git log

git log -2
git log -p // detalle cambios realizados
git log --stat <file> // lista de archivos modificados, estadisticas
git log <path> // Show commit logs
git log --oneline <file> // log en una sola linea
git log HEAD
git log --pretty="%cn committed %h on %cd"
git log --oneline -4 
git log --after="1-7-2017"
git log --before="1-7-2017"
git log --after="yesterday"
git log --branches=* /
git log --author="pepe"
git log master..otrarama

// ver lo que no se ha fusionado
git log --oneline master..develop 

// ver lo que no se ha enviado al remoto 
git log origin/master..HEAD
 
git log --oneline --decorate --graph --all

// ver las ramas con grafos
git log --oneline --graph master experiment 

git log --merge // Una lista de confirmaciones que entran en conflicto entre las ramas que se van a fusionar


■ git status

//Show the working tree status
git status

//Give the output in the short-format.
git status -s

■ git show

git show
git show --name-only <commit-hash> // lista archivos del commit
git show HEAD@{5}
git show master@{yesterday}


■ git remote

git remote -v // listar remotos
git remote show origin


■ git checkout

//check it out from the appropriate commit
$ git checkout 55df4c2 filename

//Pasar de una rama a otra
git checkout experimental
git checkout -b otrarama


■ Others

ls -la
less

git ls-files
git ls-tree <>

git annotate <file>

git add <file>

git fetch && git diff --name-only master master@{u}

//si hemos subido el commit a nuestro repositorio remoto (hemos realizado push)
git revert HEAD

// will abort the merge process and try to reconstruct the pre-merge state
git merge --abort

git diff

git commit --amend -m "New commit message." // actualizar mensaje de un commit

git reset HEAD <CONTRIBUTING.md> // quitar del area de preparacion
 
git rev-parse topic1 // Si se quiere ver a qué SHA-1 apunta un rama en específico
   
git reflog

git stash // guardar cambios si desea cambiar de rama
	
git rebase -i HEAD~3 // hacer cambios en modo interactivo
 
git blame -L 12,22 simplegit.rb // revisar quienes modificaron el archivo
  
git fsck --full // te mostrará todos los objetos sin referencias a ningún otro
  
git count-objects -v
   
git shortlog // presentará un resumen de los commits agrupados por autor

git cherry-pick <commit-hash> // obtener un commit de otra rama

//Create an empty Git repository or reinitialize an existing one
git init 

//Remove files from the working tree and from the index
git rm

